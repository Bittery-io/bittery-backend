# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Default dhparam
# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}

access_log off;
# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";

# REST API
server {
	listen 443 ssl;
	ssl_certificate /etc/nginx/lnd/tls.cert;
	ssl_certificate_key /etc/nginx/lnd/tls.key;

	location /lnd-rest/btc/ {
		resolver 127.0.0.11;
		set $upstream lnd_bitcoin:8080;
		proxy_set_header Host $host;
		rewrite ^/lnd-rest/btc/(.*) /$1 break;
		proxy_pass https://$upstream;
	}
}

# RTL
#server {
#	server_name $SERVER_NAME;
#	listen 446 ssl;
#	ssl_certificate /etc/nginx/certs/app.bittery.io/fullchain.pem;
#  ssl_certificate_key /etc/nginx/certs/app.bittery.io/privkey.pem;
#
#	location /rtl/ {
#		resolver 127.0.0.11;
#		set $upstream $RTL_HOST:3000;
#		proxy_set_header Host $host;
#		proxy_pass http://$upstream;
#	}
#}

# GRPCS
server {
	listen 10009 ssl http2;
	location / {
		resolver 127.0.0.11;
		set $upstream lnd_bitcoin:10009;
		proxy_set_header Host $host;
		grpc_pass grpcs://$upstream;
	}
	# Ta poni≈ºsza linia powoduje blad bo nie tworzy sie zaden taki vhost.d
	# access_log /var/log/nginx/access.log vhost;
	proxy_set_header Host $host;
	ssl_certificate /etc/nginx/lnd/tls.cert;
	ssl_certificate_key /etc/nginx/lnd/tls.key;
}
